#!/home/linuxbrew/.linuxbrew/bin/zx

const { readFile, writeFile } = require("fs").promises;
const xrandr = await $`xrandr`;

const MONITOR_STATUS = {
  DISCONNECTED: "disconnected",
  PLUGGED: "plugged",
  ACTIVE: "active",
};

const monitors = Object.fromEntries(
  xrandr.stdout
    .split("\n")
    .filter((l) => !l.match(/^\s/))
    .filter((l) => l.match(/ (?:dis)?connected/))
    .map((l) => {
      const [name, status, thirdword] = l.split(" ");

      if (status === "disconnected") {
        return [name, MONITOR_STATUS.DISCONNECTED];
      }

      // if thirdword doesnt start with "(" then it has
      // a resolution, so it is active and displaying
      if (thirdword.startsWith("(")) {
        return [name, MONITOR_STATUS.PLUGGED];
      }

      return [name, MONITOR_STATUS.ACTIVE];
    })
);

let currentConfig = { ...monitors };
let oldConfig = {};
try {
  const file = await readFile(
    `${process.env.HOME}/.config/monitors.json`,
    "utf8"
  );
  oldConfig = { ...currentConfig, ...JSON.parse(file) };
} catch (e) {
  await writeFile(
    `/home/{{ .username }}/.config/monitors.json`,
    JSON.stringify(currentConfig)
  );
  await $`notify-send "First time setup of monitors.json"`;
  process.exit(0);
}

console.log({ oldConfig, currentConfig });

const diff = Object.fromEntries(
  Object.entries(currentConfig).filter(([k, v]) => oldConfig[k] !== v)
);

if (Object.keys(diff).length === 0) {
  process.exit(0);
} else {
  const pretty = Object.entries(diff)
    .map(([k, v]) => `${k}: ${v}`)
    .join("\n");

  await $`notify-send "Monitor changes detected" "${pretty}"`;
}

for (const [name, status] of Object.entries(diff)) {
  switch (oldConfig[name]) {
    case MONITOR_STATUS.DISCONNECTED:
      if (status === MONITOR_STATUS.PLUGGED) {
        // turn on
        await $`xrandr --output ${name} --auto --right-of {{ .primary_monitor }}`;
      }
      break;
    case MONITOR_STATUS.PLUGGED:
      if (status === MONITOR_STATUS.DISCONNECTED) {
        // turn off
        await $`xrandr --output ${name} --off`;
      } else if (status === MONITOR_STATUS.ACTIVE) {
        // turn on
        await $`xrandr --output ${name} --auto --right-of {{ .primary_monitor }}`;
      }
      break;
    case MONITOR_STATUS.ACTIVE:
      if (status === MONITOR_STATUS.DISCONNECTED) {
        // turn off
        await $`xrandr --output ${name} --off`;
      }
      break;
  }
}

await writeFile(
  `/home/{{ .username }}/.config/monitors.json`,
  JSON.stringify(currentConfig)
);

await $`i3-msg reload`;
await $`i3-msg restart`;
